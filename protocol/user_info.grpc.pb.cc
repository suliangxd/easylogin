// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user_info.proto

#include "user_info.pb.h"
#include "user_info.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace userinfo {

static const char* UserAction_method_names[] = {
  "/userinfo.UserAction/Login",
  "/userinfo.UserAction/Register",
  "/userinfo.UserAction/Test",
};

std::unique_ptr< UserAction::Stub> UserAction::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserAction::Stub> stub(new UserAction::Stub(channel));
  return stub;
}

UserAction::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Login_(UserAction_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Register_(UserAction_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Test_(UserAction_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserAction::Stub::Login(::grpc::ClientContext* context, const ::userinfo::LoginRequest& request, ::userinfo::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::userinfo::LoginResponse>* UserAction::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::userinfo::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::userinfo::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::userinfo::LoginResponse>* UserAction::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::userinfo::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::userinfo::LoginResponse>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::Status UserAction::Stub::Register(::grpc::ClientContext* context, const ::userinfo::RegisterRequest& request, ::userinfo::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Register_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::userinfo::RegisterResponse>* UserAction::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::userinfo::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::userinfo::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::userinfo::RegisterResponse>* UserAction::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::userinfo::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::userinfo::RegisterResponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, false);
}

::grpc::Status UserAction::Stub::Test(::grpc::ClientContext* context, const ::userinfo::TestRequest& request, ::userinfo::TestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Test_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::userinfo::TestResponse>* UserAction::Stub::AsyncTestRaw(::grpc::ClientContext* context, const ::userinfo::TestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::userinfo::TestResponse>::Create(channel_.get(), cq, rpcmethod_Test_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::userinfo::TestResponse>* UserAction::Stub::PrepareAsyncTestRaw(::grpc::ClientContext* context, const ::userinfo::TestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::userinfo::TestResponse>::Create(channel_.get(), cq, rpcmethod_Test_, context, request, false);
}

UserAction::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserAction_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserAction::Service, ::userinfo::LoginRequest, ::userinfo::LoginResponse>(
          std::mem_fn(&UserAction::Service::Login), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserAction_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserAction::Service, ::userinfo::RegisterRequest, ::userinfo::RegisterResponse>(
          std::mem_fn(&UserAction::Service::Register), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserAction_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserAction::Service, ::userinfo::TestRequest, ::userinfo::TestResponse>(
          std::mem_fn(&UserAction::Service::Test), this)));
}

UserAction::Service::~Service() {
}

::grpc::Status UserAction::Service::Login(::grpc::ServerContext* context, const ::userinfo::LoginRequest* request, ::userinfo::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserAction::Service::Register(::grpc::ServerContext* context, const ::userinfo::RegisterRequest* request, ::userinfo::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserAction::Service::Test(::grpc::ServerContext* context, const ::userinfo::TestRequest* request, ::userinfo::TestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace userinfo

